import style from "./style.module.scss";
import React from "react";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { CircularProgress, Paper } from "@mui/material";
import { ThemeProvider } from "@emotion/react";
import NotFound from "../notFound";
import { IAppContextData } from "../context/index.d";
import { AppContext } from "../context";
import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import HttpApi from "i18next-http-backend";
i18n
  .use(initReactI18next) // passes i18n down to react-i18next
  .use(LanguageDetector)
  .use(HttpApi)
  .init({
    supportedLngs: ["en", "es"],
    // the translations
    // (tip move them in a JSON file and import them,
    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)
    fallbackLng: "en",
    interpolation: {
      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape
    },
    detection: {
      order: ["cookie", "htmlTag", "localStorage", "path", "subdomain"],
      caches: ["cookie"],
    },
    backend: {
      loadPath: "/json/lan/{{lng}}/translation.json",
    },
    react: { useSuspense: false },
  });

const SigninForm: React.LazyExoticComponent<React.FC> = React.lazy(() => {
  return import("../signinForm");
});

export const App = () => {
  const { themeObject } = React.useContext(AppContext) as IAppContextData;
  let userDarkMode = false;
  //la salida debe especificar el valor inicial del proveedor (objeto vacio)
  return (
    <ThemeProvider theme={themeObject}>
      <React.Suspense
        fallback={
          <CircularProgress
            style={{ position: "absolute", top: "calc(50% - 20px)" }}
          />
        }
      >
        <BrowserRouter>
          <Routes>
            *
            <Route
              index={false}
              path="/"
              element={
                <>
                  <Paper
                    className={style.formContainer}
                    style={
                      userDarkMode ? { backgroundColor: "rgb(0 0 0)" } : {}
                    }
                  >
                    <SigninForm></SigninForm>
                  </Paper>
                </>
              }
            />
            <Route
              path="*"
              element={
                <>
                  <NotFound></NotFound>
                </>
              }
            />
          </Routes>
        </BrowserRouter>
      </React.Suspense>
    </ThemeProvider>
  );
};

/*
const RecoverForm: React.LazyExoticComponent<React.FC> = React.lazy(() => {
  return import("../recoverForm");
});

const SigninForm: React.LazyExoticComponent<React.FC> = React.lazy(() => {
  return import("../signinForm");
});

const SignupForm: React.LazyExoticComponent<React.FC> = React.lazy(() => {
  return import("../signupForm");
});

const ScreenManager: React.LazyExoticComponent<React.FC> = React.lazy(() => {
  return import("../screenManager");
});
*/

/*
export const App = () => {
  const { themeObject, userDarkMode, userLoginState } = React.useContext(
    AppContext
  ) as IAppContextData;

  //la salida debe especificar el valor inicial del proveedor (objeto vacio)
  return (
    <ThemeProvider theme={themeObject}>
      <React.Suspense
        fallback={
          <CircularProgress
            style={{ position: "absolute", top: "calc(50% - 20px)" }}
          />
        }
      >
        <BrowserRouter>
          <Routes>* 
            <Route
              index={false}
              path="/"
              element={
                <>
                  {userLoginState === EnumUserLoginState.LOGUED_IN ? (
                    <ScreenManager></ScreenManager>
                  ) : (
                    <></>
                  )}
                  {userLoginState === EnumUserLoginState.LOGUED_OUT ? (
                    <Paper
                      className={style.formContainer}
                      style={
                        userDarkMode ? { backgroundColor: "rgb(0 0 0)" } : {}
                      }
                    >
                      <SigninForm></SigninForm>
                    </Paper>
                  ) : (
                    <></>
                  )}
                  {userLoginState === EnumUserLoginState.LOADING ? (
                    <div className={style.loader}>
                      <CircularProgress
                        style={{
                          position: "absolute",
                          top: "calc(50% - 20px)",
                        }}
                      />
                    </div>
                  ) : (
                    <></>
                  )}
                  {userLoginState === EnumUserLoginState.ERROR ? (
                    <>
                      <span>error:</span>
                      <span>Error connecting with Firebase database</span>
                    </>
                  ) : (
                    <></>
                  )}
                </>
              }
            />
            <Route
              path="signUp"
              element={
                <Paper
                  className={style.formContainer}
                  style={userDarkMode ? { backgroundColor: "rgb(0 0 0)" } : {}}
                >
                  <SignupForm></SignupForm>
                </Paper>
              }
            />
            <Route
              path="recover"
              element={
                <Paper
                  className={style.formContainer}
                  style={userDarkMode ? { backgroundColor: "rgb(0 0 0)" } : {}}
                >
                  <RecoverForm />
                </Paper>
              }
            />
            <Route
              path="*"
              element={
                <>
                  <NotFound></NotFound>
                </>
              }
            />
          </Routes>
        </BrowserRouter>
      </React.Suspense>
    </ThemeProvider>
  );
};

*/
